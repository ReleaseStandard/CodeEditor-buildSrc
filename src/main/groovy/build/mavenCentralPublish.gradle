apply plugin: 'maven'
apply plugin: 'signing'

def Properties properties = new Properties()
if ( (new File('local.properties')).exists() ) {
	properties.load(project.file("local.properties").newDataInputStream())
}
for(Map.Entry<String, String> e : new HashMap(){{
	put("keyId", "KEYID");
	put("password", "PASSWORD");
	put("key", "KEY");
	put("ossrhUsername", "OSSRH_USERNAME");
	put("ossrhPassword", "OSSRH_PASSWORD");
	put("sonatypeStagingProfileId", "SONATYPE_STAGING_PROFILE_ID");
	put("version", "VERSION");
}}) {
	String k = e.getKey();
	String v = e.getValue();
	ext[k] = properties.getProperty(k)
	if ( System.getenv(v) != null ) {
		ext[k] = System.getenv(v);
	}

	// github CI seem to initialize environment variables to empty string instead of null
        if ( ext[k] != null && ext[k].equals("") ) {
                ext[k] = null;
        }
}

task collectSubModules() {
	doFirst() {
		project.subprojects { Project p ->
			apply plugin: 'maven'
			apply plugin: 'maven-publish'
			apply plugin: 'signing'
		}
	}
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    //from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    //from sourceSets.main.allSource
}

//
// Maven publish customization and publish
//
apply plugin: 'maven-publish'
def isRoot = ( rootProject.compareTo(project) == 0 ) 
if ( isRoot ) {
	apply plugin: 'io.github.gradle-nexus.publish-plugin'
 
	nexusPublishing {
	        repositories {
	                sonatype {
	                        stagingProfileId = sonatypeStagingProfileId
	                        username = ossrhUsername
	                        password = ossrhPassword
	                        nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
	                        snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
	                }
	        }
	}
}

afterEvaluate {
	publishing {
	    publications {
	        mavenJava(MavenPublication) {

	               artifact sourcesJar
	               artifact javadocJar
		       from project.softwareComponentChoosed

	               pom {
	                       groupId = "io.github.ReleaseStandard.CodeEditor"
	                       artifactId = project.name.replace("CodeEditor-", "")
	                       name = project.name
	                       packaging = 'aar'
	                       description = "${project.name} for CodeEditor"
	                       url = "https://github.com/ReleaseStandard/${project.name}"
	                       scm {
	                               connection = "scm:git:github.com/ReleaseStandard/${project.name}.git"
	                               developerConnection = "scm:git:ssh://github.com/ReleaseStandard/${project.name}.git"
	                               url = "https://github.com/ReleaseStandard/${project.name}"
	                       }
	                       developers {
	                               developer {
	                                       id = "ReleaseStandard"
	                                       name = "Release Standard"
	                                       email = "releasestandard@netc.eu"
	                               }
	                       }
	                       licenses {
	                               license {
	                                       name = "The Apache License, Version 2.0"
	                                       url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
	                               }
	                       }
	               }
	        }
	    }
	}


	signing {
	    useInMemoryPgpKeys(
	            keyId,
	            key,
	            password,
	    )
	    sign publishing.publications.mavenJava
	}
}