apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'io.github.gradle-nexus.publish-plugin'

def Properties properties = new Properties()
if ( (new File('local.properties')).exists() ) {
	properties.load(project.file("local.properties").newDataInputStream())
}
for(Map.Entry<String, String> e : new HashMap(){{
	put("keyId", "KEYID");
	put("password", "PASSWORD");
	put("key", "KEY");
	put("ossrhUsername", "OSSRH_USERNAME");
	put("ossrhPassword", "OSSRH_PASSWORD");
	put("sonatypeStagingProfileId", "SONATYPE_STAGING_PROFILE_ID");
	put("version", "VERSION");
}}) {
	String k = e.getKey();
	String v = e.getValue();
	ext[k] = properties.getProperty(k)
	if ( System.getenv(v) != null ) {
		ext[k] = System.getenv(v);
	}
}




if ( version == "unspecified" ) {
        version = '1';
}

nexusPublishing {
    repositories {
        sonatype {
            stagingProfileId = sonatypeStagingProfileId
            username = ossrhUsername
            password = ossrhPassword
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
        }
    }
}

task collectSubModules() {
	doFirst() {
		project.subprojects { Project p ->
			apply plugin: 'maven'
			apply plugin: 'maven-publish'
			apply plugin: 'signing'
		}
	}
}
task produceBigJar(type: Jar) {
        dependsOn collectSubModules

	doFirst() {
		String[] types = ["jar", "bundleReleaseAar"]
		for( String type : types ) {
		        def tasks = project.getTasksByName(type,true)
			for( Task t : tasks ) {
				Project p = t.getProject()
				if ( p == project ) {
					continue
				}
		                t.getOutputs().getFiles().forEach { File f ->
					if ( ! f.exists() ) {
						println "[***] WARNING : " + f.getPath() + " does not exists"
					} else {
						println "Found file ${f.getPath()} to add to the archive"
						rootProject.artifacts.add("archives", f) {
							classifier = "${p.name}"
						}
						if ( type == "jar" ) {
				                        from(zipTree(f.getPath()))
						}
					}
		                }
			}
		}
	}

}
task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

 
artifacts {
    archives produceBigJar, javadocJar, sourcesJar
}

uploadArchives {
  dependsOn produceBigJar  
  repositories {
    mavenDeployer {
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

      repository(url: "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/") {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      snapshotRepository(url: "https://s01.oss.sonatype.org/content/repositories/snapshots/") {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      pom.project {

	name project.name
        packaging 'jar'
	description "${project.name} for CodeEditor"
        url "https://github.com/ReleaseStandard/${project.name}"
	scm {
               connection "scm:git:github.com/ReleaseStandard/${project.name}.git"
               developerConnection "scm:git:ssh://github.com/ReleaseStandard/${project.name}.git"
               url "https://github.com/ReleaseStandard/${project.name}"

        }

        licenses {
          license {
            name 'The Apache License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }

        developers {
		developer {
			id = 'ReleaseStandard'
			name = 'ReleaseStandard'
			email = 'releasestandard@netc.eu'
		}        
	}

      }
    }
  }
}

signing {
    useInMemoryPgpKeys(
            keyId,
            key,
            password,
    )
    sign configurations.archives
}
