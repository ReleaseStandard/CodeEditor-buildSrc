def prefix(msg) {
	return "[TEST]" + msg
}
def info(msg) {
	project.logger.info(prefix(msg))
}
def debug(msg) {
	project.logger.debug(prefix(msg))
}

info("Script inclusion")

/**
 * Relative include for subprojects
 */
def resolveRelativePath(path) {
	def remainPart = getRemainingPart(project)
        String[] parts = remainPart.split(":")
        String finalPath = ""
        for(int a = 0; a < parts.length-1; a=a+1) {
        	if(parts[a].size() > 0 ) {
        		finalPath += ":" + parts[a]
        	}
        }
        finalPath += path
	def p = project.findProject(finalPath)
	if ( p != null ) {
        	if ( System.env.DEBUG ) { println "resolveRelativePath: finalPath=${finalPath},remainPart=${remainPart},path=${path}" }
        	return finalPath
        } else {
	        String alternativePath = remainPart + path
        	p = project.findProject(alternativePath)
        	if ( p != null ) {
	        	if ( System.env.DEBUG ) { println "resolveRelativePath: alternativePath=${alternativePath},path=${path}" }
	        	return alternativePath
        	}
        }
        println "[WARNING] : path resolution has failed"
        return null
}
def implementationR(path) {

        def finalPath = resolveRelativePath(path)
        if ( System.env.DEBUG ) {
        	println "implementationR : finalPath=${finalPath}"
        }
        dependencies {
                universalEmbed project(path: finalPath)
        }
}


project.ext.set("implementationR",{ String path ->
        implementationR(path)
})

configurations {
	all {
		resolutionStrategy {
	           dependencySubstitution.all { DependencySubstitution dependency ->

                       if ( requested instanceof ProjectComponentSelector ) {
                               info("This is a project dependencies")
                       }
                       else if ( requested instanceof ModuleComponentSelector ) {

				if ( buildFromLocal instanceof String ) {
					// tweak remote dependencie resolution
					/*if ( requested.group == "io.github.ReleaseStandard.CodeEditor" ) {

						println ">>>Dependency resolution"
						def modPath = ":CodeEditor-" + requested.getModule()
						def module = rootProject.findProject(modPath)
						if ( module == null ) {
							println "error : ${modPath} not found"
							info("[ERROR] " + modPath + " not found")
						} else {
							println "module=${module}"
							dependency.useTarget module
						}
					}*/

				}

			}
		}
		}
	}
}

