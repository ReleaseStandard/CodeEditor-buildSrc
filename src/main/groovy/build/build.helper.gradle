// BEGIN build.helper.gradle
//
// - implementation relative for projects
// - change remote to local when property buildFromLocal is set
//

p("Script inclusion")

/**
 * Relative include for subprojects
 */
def resolveRelativePath(path) {
	def remainPart = getRemainingPart(project)
	String[] parts = remainPart.split(":")
	String finalPath = ""
	for(int a = 0; a < parts.length-1; a=a+1) {
		if(parts[a].size() > 0 ) {
			finalPath += ":" + parts[a]
		}
	}
	finalPath += path
	def p = project.findProject(finalPath)
	if ( p != null ) {
		if ( System.env.DEBUG ) { println "resolveRelativePath: finalPath=${finalPath},remainPart=${remainPart},path=${path}" }
		return finalPath
	} else {
		String alternativePath = remainPart + path
		p = project.findProject(alternativePath)
		if ( p != null ) {
			if ( System.env.DEBUG ) { println "resolveRelativePath: alternativePath=${alternativePath},path=${path}" }
			return alternativePath
		}
	}
	throw new RuntimeException("project with path '${path}' not found")
}

/**
 * This extends project() function by making it relative.
 * @param path
 * @return
 */
def projectR(path) {
	def resolvedPath = resolveRelativePath(path)
	p "projectR : resolvedPath = ${resolvedPath}"
	return project(resolvedPath)
}

project.ext.set("projectR",{ String path ->
	projectR(path)
})



configurations {
	all {
		resolutionStrategy {
			dependencySubstitution.all { DependencySubstitution dependency ->
				if ( requested instanceof ProjectComponentSelector ) {
					// do nothing
				}
				else if ( requested instanceof ModuleComponentSelector )
				{
					p("${project} trying to resolve : ${requested} : ${requested.group} : ${groupPathBase}")
					// tweak remote dependencie resolution
					if ( requested.group.matches("${groupPathBase}.*") ) {
						def path = "${requested.displayName}".replaceFirst("${groupPathBase}","").replaceAll("\\.", ":")
						p("path=${path}")
						def prj = rootProject.findProject(path)
						if ( prj != null ) {
							p("Substitute ${requested.getDisplayName()} to ${prj} because we test")
							dependency.useTarget(prj, "${explain}")
						}
					}
				}
			}
		}
	}
}

// END
