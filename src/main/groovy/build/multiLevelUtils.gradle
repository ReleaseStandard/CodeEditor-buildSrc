// We need additionnal tools when working on multi level gradle projects

import org.gradle.api.internal.artifacts.dependencies.DefaultProjectDependency

// link tasks that need to be
// (because empty nodes stop the propagation to children projects)
afterEvaluate {
    configurations.all { Configuration c ->
        c.dependencies.all { Dependency dependency ->
            if (dependency instanceof DefaultProjectDependency) {
                Project targetProject = dependency.dependencyProject
                if ( targetProject != project ) {
                    p "resolve dependency : ${dependency} for ${project}($c)"
                    Object[] taskTypes = [SourceTask.class, Delete.class, AbstractTestTask.class, Test.class, "test"]
                    for(Object taskType : taskTypes) {
                        Object collection
                        if ( taskType instanceof Class ) {
                            collection = tasks.withType(taskType)
                        } else if ( taskType instanceof String ) {
                            collection = tasks.getByName(taskType)
                        } else {
                            println "Error unreconized type for taskType " + taskType.getClass()
                            System.exit(1)
                        }

                        for (Task rootTask : collection) {
                            Task childTask = targetProject.tasks.findByName(rootTask.getName())
                            if (childTask == null) {
                                continue;
                            }
                            rootTask.dependsOn childTask
                            rootTask.mustRunAfter childTask
                        }
                    }
                }
            }
        }
    }
}