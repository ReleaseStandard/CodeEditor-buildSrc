//
// This class an universal way to embed dependencies into the final object
//

def universalEmbed(moduleSelector) {

    def resolvedSelector = moduleSelector
    if ( moduleSelector instanceof ProjectDependency ) {
        resolvedSelector = moduleSelector.getDependencyProject()
    }
    if ( moduleSelector instanceof String ) {
        resolvedSelector = rootProject.findProject(moduleToProject(moduleSelector))
    }

    def selector = moduleSelector
    if ( rootProject.hasProperty('buildFromLocal') ) {
        selector = resolvedSelector
    }

    if ( System.env.DEBUG ) {
        println "universalEmbed of ${moduleSelector} resolved to ${selector}"
    }

    if ( project.plugins.hasPlugin("com.android.library") ) {
        apply plugin: 'com.kezong.fat-aar'
        fataar {
            transitive = true
        }
        if ( selector instanceof Project ) {
            selector.afterEvaluate {
                if ( !selector.plugins.hasPlugin("com.android.library")) {
                    if ( System.env.DEBUG ) {
                        println "${project} -> ${selector} don't have the plugin"
                        println "Due to a limitation of fat-aar we must correct that here"
                    }
                    project.dependencies.api selector
                }
            }
        } 
        project.dependencies.embed selector
    } else if (project.plugins.hasPlugin("java-library")) {
        project.dependencies.api selector
    } else {
        println "[ERROR] ${selector} for ${project} is in an unknow form"
        for(Configuration c : project.configurations) {
            print "${c.name} "
        }
        println ""
    }
}



project.ext.set("universalEmbed",{ Object moduleSelector ->
        universalEmbed(moduleSelector)
})
