/**
 * Relative include for subprojects
 */
def resolveRelativePath(path) {
    def remainPart = getRemainingPart(project)
    String[] parts = remainPart.split(":")
    String finalPath = ""
    for(int a = 0; a < parts.length-1; a=a+1) {
        if(parts[a].size() > 0 ) {
            finalPath += ":" + parts[a]
        }
    }
    finalPath += path
    def prj = project.findProject(finalPath)
    if ( prj != null ) {
        p "resolveRelativePath: finalPath=${finalPath},remainPart=${remainPart},path=${path}"
        return finalPath
    } else {
        String alternativePath = remainPart + path
        prj = project.findProject(alternativePath)
        if ( prj != null ) {
            p "resolveRelativePath: alternativePath=${alternativePath},path=${path}"
            return alternativePath
        }
    }
    throw new RuntimeException("project with path '${path}' not found")
}

/**
 * This extends project() function by making it relative.
 * @param path
 * @return
 */
def projectR(path,obj) {
    def resolvedPath = resolveRelativePath(path)
    p "projectR : resolvedPath = ${resolvedPath}"
    if ( obj == null ) {
        return project(resolvedPath)
    } else if ( obj instanceof Closure ) {
        return project(resolvedPath, obj)
    } else {
        println "obj="+obj.getClass() + " not understood by projectR"
        System.exit(1)
    }
}

ext.set("projectRA",{ String path, Closure closure ->
    projectR(path, closure)
})
ext.set("projectR",{ String path ->
    projectR(path, null)
})