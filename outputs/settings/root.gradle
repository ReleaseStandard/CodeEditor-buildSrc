// root project of CodeEditor have common parts with modules so we manage that here

// src/main/groovy//settings//lib.gradle
def p(msg) {
	def debug = System.env.DEBUG
	if ( debug ) {
		println msg
	}
}

// deduce the remaining part from an entry object
def getRemainingPart(dir) {
  def remainPart = ""
  def projectDirectory = getProjectPath(dir)
  def rootProjectDirectory = rootDir.getPath()
  remainPart = projectDirectory.replace(rootProjectDirectory,"")
  remainPart = remainPart.replaceAll("/",":")
  return remainPart
}

def getProjectPath(obj) {
  if ( obj instanceof Project ) {
    return obj.projectDir.getPath()
  }
  if ( obj instanceof File ) {
      return obj.getPath()
  }
  return obj	
}

// produce project path from the moduleString
def moduleToProject(moduleString) {
  println "entry=" + moduleString
  def trgGroup = "io.github.ReleaseStandard.CodeEditor"
  def parts = moduleString.split(":")
  def group = parts[0]
  def module = parts[1]
  def version = parts[2]
  def remainPart = group.replace(trgGroup,"")
  remainPart = remainPart.replace(".",":")
  def path = remainPart + ":${module}"
  return path
}
// src/main/groovy//settings//common.gradle
rootDir.eachDirRecurse { dir ->
  if ( ! ( dir.name.equals("buildSrc") ) 
  && new File(dir, 'build.gradle').exists()
  ) {
    if ( ! rootDir.equals(dir.getPath()) ) {
      makeInclude(dir)
    }
  }
}

def makeInclude(dir) {

  def remainPart = getRemainingPart(dir)
  if ( System.env.DEBUG ) {
    println "remainPart=${remainPart}"
  }
  include("${remainPart}")
  project("${remainPart}").projectDir = file(getProjectPath(dir))

}

// src/main/groovy//settings//root.gradle
/**
 * 
 * This script define configuration for the root
 * 
 **/