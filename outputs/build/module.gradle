ext['githubOwner'] = "ReleaseStandard"
ext['groupPathBase'] = "io.github.${githubOwner}.CodeEditor"

def p(msg) {
	def debug = System.env.DEBUG
	if ( debug ) {
		println msg
	}
}

// deduce the remaining part from an entry object
def getRemainingPart(dir) {
  def remainPart = ""
  def projectDirectory = getProjectPath(dir)
  def rootProjectDirectory = rootDir.getPath()
  remainPart = projectDirectory.replace(rootProjectDirectory,"")
  remainPart = remainPart.replaceAll("/",":")
  return remainPart
}

def getProjectPath(obj) {
  if ( obj instanceof Project ) {
    return obj.projectDir.getPath()
  }
  if ( obj instanceof File ) {
      return obj.getPath()
  }
  return obj	
}

// produce project path from the moduleString
def moduleToProject(moduleString) {
  def parts = moduleString.split(":")
  def group = parts[0]
  def module = parts[1]
  def version = parts[2]
  def remainPart = group.replace("${groupPathBase}","")
  remainPart = remainPart.replace(".",":")
  def path = remainPart + ":${module}"
  return path
}

// BEGIN module.gradle
//
// Used to compile a module from CodeEditor (eg editor)
//  - modules used in all projects
//  - repositories
//  - system that allow to fetch the latest version from github
//  - include other plugins of this project
//
buildscript {
        ext["buildScriptRepos"] = {
                flatDir {
                    dirs "${rootDir.getAbsolutePath()}/libs"
                }
                google()
                mavenCentral()
                jcenter() // Warning: this repository is going to shut down soon
                maven { url = 'https://jitpack.io' }
	        maven { url = 'https://s01.oss.sonatype.org/content/groups/public/' }
                maven { url = "https://plugins.gradle.org/m2/" }
        }
        ext["buildScriptDep"] = {
                classpath "com.android.tools.build:gradle:4.2.1"
                classpath 'io.github.gradle-nexus:publish-plugin:1.1.0'
                classpath 'com.github.kezong:fat-aar:1.3.6'
                classpath 'org.netbeans.api:org-apache-tools-ant-module:RELEASE124'
                classpath "net.thauvin.erik.gradle:semver:1.0.4"
                classpath "com.github.johnrengelman:shadow:6.1.0"
		classpath 'org.jacoco:org.jacoco.core:0.8.1'
        }

        repositories buildScriptRepos
        dependencies buildScriptDep

}
//
// Setup root project
//
ext.set("groupPath","io.github.${githubOwner}.CodeEditor")

apply plugin: "net.thauvin.erik.gradle.semver"

group = "${getName()}".replace("CodeEditor","")

def doesTaskNeedManifold(name) {
    return name.contains("Test") && !name.contains("Fixtures")
}
def usePlugin(project, plugin) {
    if ( System.env.USE_LOCAL_BUILDSRC ) {
        project.apply from: "${rootDir.getPath()}/buildSrc/outputs/build/${plugin}"
    } else {
        project.apply from: "https://raw.githubusercontent.com/${githubOwner}/CodeEditor-buildSrc/master/outputs/build/${plugin}"
    }
}
allprojects { Project p ->

        // forbid extra CodeEditor prefix
        p.group = p.group.replaceAll("CodeEditor","")
        p.group = p.group.replaceAll(/\.$/,"")

        // create the correct group string
        p.group = "${groupPath}${p.group}"
        p.group = p.group.replaceAll(/\.$/,"")

        repositories buildScriptRepos
        usePlugin(p, "embed.gradle")
        usePlugin(p, "build.helper.gradle")
        p.apply plugin: 'jacoco'

        try {
            if (JavaVersion.current() != JavaVersion.VERSION_1_8) {
               if (sourceSets.main.allJava.files.any { it.name == "module-info.java" }) {
                    tasks.withType(JavaCompile) {
                        if ( doesTaskNeedManifold(getName()) ) {
                                // If you DO define a module-info.java file:
                                options.compilerArgs += ['-Xplugin:Manifold', '--module-path', it.classpath.asPath]
                        }
                   }
               }
           } else {
                throw new RuntimeException();
           }
        } catch(Exception e) {
           p.tasks.withType(JavaCompile) {
                if ( doesTaskNeedManifold(getName()) ) {
                        // If you DO NOT define a module-info.java file:
                        options.compilerArgs += ['-Xplugin:Manifold']
                }
            }
       }

       p.afterEvaluate {
               p.dependencies {
                        testImplementation 'junit:junit:4.+'

                       // jail break and joo
                       testImplementation 'systems.manifold:manifold-json-rt:2021.1.14'
                       testImplementation 'systems.manifold:manifold-props-rt:2021.1.14'
                       testImplementation 'systems.manifold:manifold-ext:2021.1.14'
                       testImplementation 'systems.manifold:manifold-rt:2021.1.14'
                       annotationProcessor 'systems.manifold:manifold-json:2021.1.14'
                       annotationProcessor 'systems.manifold:manifold-props:2021.1.14'
                       annotationProcessor 'systems.manifold:manifold-ext:2021.1.14'
               }
       }
}

usePlugin(project, "packaging.gradle")
usePlugin(project, "newVersion.gradle")
usePlugin(project, "mavenCentralPublish.gradle")

