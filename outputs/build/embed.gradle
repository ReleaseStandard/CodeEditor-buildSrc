ext['githubOwner'] = "ReleaseStandard"

def p(msg) {
	def debug = System.env.DEBUG
	if ( debug ) {
		println msg
	}
}

// deduce the remaining part from an entry object
def getRemainingPart(dir) {
  def remainPart = ""
  def projectDirectory = getProjectPath(dir)
  def rootProjectDirectory = rootDir.getPath()
  remainPart = projectDirectory.replace(rootProjectDirectory,"")
  remainPart = remainPart.replaceAll("/",":")
  return remainPart
}

def getProjectPath(obj) {
  if ( obj instanceof Project ) {
    return obj.projectDir.getPath()
  }
  if ( obj instanceof File ) {
      return obj.getPath()
  }
  return obj	
}

// produce project path from the moduleString
def moduleToProject(moduleString) {
  def trgGroup = "io.github.${githubOwner}.CodeEditor"
  def parts = moduleString.split(":")
  def group = parts[0]
  def module = parts[1]
  def version = parts[2]
  def remainPart = group.replace(trgGroup,"")
  remainPart = remainPart.replace(".",":")
  def path = remainPart + ":${module}"
  return path
}

// BEGIN embed.gradle
//
// Used to provide universalEmbed configuration property
//  - shadow for java library projects (jar)
//  - fat-aar for android library projects

def universalEmbed(selector) {

    p("universalEmbed of ${selector}")

    if ( rootProject.hasProperty('buildFromLocal') ) {
        if (selector instanceof ProjectDependency) {
            selector = selector.getDependencyProject()
        }
        if (selector instanceof String) {
            selector = rootProject.findProject(moduleToProject(selector))
        }
        p("The selector has been translated to local dependency : ${selector}")
    }

    if ( project.plugins.hasPlugin("com.android.library") ) {
        apply plugin: 'com.kezong.fat-aar'
        fataar {
            transitive = true
        }
    if ( rootProject.hasProperty('buildFromLocal') ) {
            if ( selector instanceof Project ) {
                selector.afterEvaluate {
                    if ( !selector.plugins.hasPlugin("com.android.library")) {
                        if ( System.env.DEBUG ) {
                            println "${project} -> ${selector} don't have the plugin"
                            println "Due to a limitation of fat-aar we must correct that here"
                        }
                        project.dependencies.implementation selector
                    }
                }
        }
        } 
        project.dependencies.embed selector
    } else if (project.plugins.hasPlugin("java-library")) {
        apply plugin: 'com.github.johnrengelman.shadow'
        if ( rootProject.hasProperty('buildFromLocal') ) {
            if ( selector instanceof String ) {
                def trgGroup = "io.github.${githubOwner}.CodeEditor"
                if ( selector.matches("${trgGroup}.*") ) {
                    selector = rootProject.findProject(moduleToProject(selector))
                }
            }
            project.dependencies.implementation selector
        }
        project.dependencies.shadow selector

        // Add tasks propagation
        if ( selector instanceof Project ) {
            selector.afterEvaluate {
                for(Task t : project.tasks) {
                    if ( t.getName().equals("projects") || t.getName().equals("tasks") ) { continue }
                    try {
                        def rootAssemble = project.tasks.getByName(t.getName())
                        def childAssemble = selector.tasks.getByName(t.getName())
                        rootAssemble.dependsOn childAssemble
                        rootAssemble.mustRunAfter childAssemble
                        rootAssemble.doLast {
                            project.jar {
                                from {
                                    project.configurations.shadow.collect { it.isDirectory() ? it : zipTree(it).matching {
                                            exclude "module-info.*"
                                        } 
                                    }
                                }
                            }
                        }
                    } catch(Exception e) {}
                }
            }
        }

    } else {
        println "[ERROR] ${selector} for ${project} is in an unknow form"
        for(Configuration c : project.configurations) {
            print "${c.name} "
        }
        println ""
    }
}



project.ext.set("universalEmbed",{ Object moduleSelector ->
        universalEmbed(moduleSelector)
})

// END
