ext['githubOwner'] = "ReleaseStandard"
ext['groupPathBase'] = "io.github.${githubOwner}.CodeEditor"

def p(msg) {
	def debug = System.env.DEBUG
	if ( debug ) {
		println msg
	}
}

// deduce the remaining part from an entry object
def getRemainingPart(dir) {
  def remainPart = ""
  def projectDirectory = getProjectPath(dir)
  def rootProjectDirectory = rootDir.getPath()
  remainPart = projectDirectory.replace(rootProjectDirectory,"")
  remainPart = remainPart.replaceAll("/",":")
  return remainPart
}

def getProjectPath(obj) {
  if ( obj instanceof Project ) {
    return obj.projectDir.getPath()
  }
  if ( obj instanceof File ) {
      return obj.getPath()
  }
  return obj	
}

// produce project path from the moduleString
def moduleToProject(moduleString) {
  def parts = moduleString.split(":")
  def group = parts[0]
  def module = parts[1]
  def version = parts[2]
  def remainPart = group.replace("${groupPathBase}","")
  remainPart = remainPart.replace(".",":")
  def path = remainPart + ":${module}"
  return path
}

// BEGIN embed.gradle
//
// Used to provide universalEmbed configuration property
//  - shadow for java library projects (jar)
//  - fat-aar for android library projects

configurations {
    universalEmbed
    implementation.extendsFrom(universalEmbed)
}

afterEvaluate {

    if (plugins.hasPlugin("java-library")) {
        apply plugin: 'com.github.johnrengelman.shadow'
        if ( project.tasks.findByName("jar") == null ) {
            project.task("jar", type: Jar, overwrite: true) {
                doLast {
                    p "this end"
                    for (TaskOutputs outs : shadowJar.outputs) {
                        for (File f : outs.files) {
                            def dest = f.parent + "/" + f.getName().replace("-" + shadowJar.getArchiveClassifier().get(), "")
                            p "this dest : " + dest
                            p "this : ${f.getAbsolutePath()}"
                            f.renameTo(new File(dest))
                        }
                    }
                }
            }
            shadowJar {
                configurations = [project.configurations.universalEmbed]
            }
            for (Task t : tasks.withType(Jar)) {
                if (t != shadowJar && t.getName().equals("jar")) {
                    p("Add the dependency : ${t}(${t.getClass()}) -> shadowJar")
                    t.mustRunAfter shadowJar
                    t.dependsOn shadowJar
                }
            }
        }
    } else if ( plugins.hasPlugin('com.android.library')) {
        apply plugin: 'com.kezong.fat-aar'
        fataar {
            transitive = true
        }
        configurations.embed.extendsFrom(configurations.universalEmbed)
    } else {
        p("Embed has failed : unknow form")
        System.exit(1)
    }

}

// END
