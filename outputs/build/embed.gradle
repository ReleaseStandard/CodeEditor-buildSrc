def p(msg) {
	def debug = System.env.DEBUG
	if ( debug ) {
		println msg
	}
}

// deduce the remaining part from an entry object
def getRemainingPart(dir) {
  def remainPart = ""
  def projectDirectory = getProjectPath(dir)
  def rootProjectDirectory = rootDir.getPath()
  remainPart = projectDirectory.replace(rootProjectDirectory,"")
  remainPart = remainPart.replaceAll("/",":")
  return remainPart
}

def getProjectPath(obj) {
  if ( obj instanceof Project ) {
    return obj.projectDir.getPath()
  }
  if ( obj instanceof File ) {
      return obj.getPath()
  }
  return obj	
}

// produce project path from the moduleString
def moduleToProject(moduleString) {
  println "entry=" + moduleString
  def trgGroup = "io.github.ReleaseStandard.CodeEditor"
  def parts = moduleString.split(":")
  def group = parts[0]
  def module = parts[1]
  def version = parts[2]
  def remainPart = group.replace(trgGroup,"")
  remainPart = remainPart.replace(".",":")
  def path = remainPart + ":${module}"
  return path
}

//
// This class an universal way to embed dependencies into the final object
//

def universalEmbed(moduleSelector) {

    def resolvedSelector = moduleSelector
    if ( moduleSelector instanceof ProjectDependency ) {
        resolvedSelector = moduleSelector.getDependencyProject()
    }
    if ( moduleSelector instanceof String ) {
        resolvedSelector = rootProject.findProject(moduleToProject(moduleSelector))
    }
    if ( System.env.DEBUG ) {
        println "moduleSelector=${moduleSelector},resolvedSelector=${resolvedSelector}"
        for(Configuration c : resolvedSelector.configurations) {
            println "c=${c.getDisplayName()}"
        }
    }

    def selector = moduleSelector
    if ( buildFromLocal instanceof String ) {
        selector = resolvedSelector
    }

    if ( project.plugins.hasPlugin("com.android.library") ) {
        apply plugin: 'com.kezong.fat-aar'
        fataar {
            transitive = true
        }
        project.dependencies.embed selector
    } else {
        project.dependencies.implementation selector
    }
}



project.ext.set("universalEmbed",{ Object moduleSelector ->
        universalEmbed(moduleSelector)
})
