ext['githubOwner'] = "ReleaseStandard"
ext['groupPathBase'] = "io.github.${githubOwner}.CodeEditor"

def p(msg) {
	def debug = System.env.DEBUG
	if ( debug ) {
		println msg
	}
}

// deduce the remaining part from an entry object
def getRemainingPart(dir) {
  def remainPart = ""
  def projectDirectory = getProjectPath(dir)
  def rootProjectDirectory = rootDir.getPath()
  remainPart = projectDirectory.replace(rootProjectDirectory,"")
  remainPart = remainPart.replaceAll("/",":")
  return remainPart
}

def getProjectPath(obj) {
  if ( obj instanceof Project ) {
    return obj.projectDir.getPath()
  }
  if ( obj instanceof File ) {
      return obj.getPath()
  }
  return obj	
}

// produce project path from the moduleString
def moduleToProject(moduleString) {
  def parts = moduleString.split(":")
  def group = parts[0]
  def module = parts[1]
  def version = parts[2]
  def remainPart = group.replace("${groupPathBase}","")
  remainPart = remainPart.replace(".",":")
  def path = remainPart + ":${module}"
  return path
}

// BEGIN embed.gradle
//
// Used to provide universalEmbed configuration property
//  - shadow for java library projects (jar)
//  - fat-aar for android library projects

configurations {
    universalEmbed
    implementation.extendsFrom(universalEmbed)
}

afterEvaluate {

    configurations.universalEmbed.collect {
        p("Add artifact ${it} to ${project}")
        def _it = it

        // Add tasks propagation : we must (compile project(':model'))
        /*
            if ( rootProject.hasProperty('buildFromLocal') ) {
        if (selector instanceof ProjectDependency) {
            selector = selector.getDependencyProject()
        }
        if (selector instanceof String) {
            if ( selector.matches("${groupPath}.*") ) {
                selector = rootProject.findProject(moduleToProject(selector))
            }
        }
        p("The selector has been translated to local dependency : ${selector}")
    }
         */

        if (plugins.hasPlugin("java-library")) {
            p("Need to add ${it} to ${project} a java-library(jar)")
            jar {
                from {
                    _it.isDirectory() ? _it : zipTree(_it).matching {
                        exclude "module-info.*"
                    }
                }
            }
        } else if ( plugins.hasPlugin('com.android.library')) {
            p("Need to add ${it} to ${project} a com.android.library(aar)")
            apply plugin: 'com.kezong.fat-aar'
            fataar {
                transitive = true
            }
            /*if ( rootProject.hasProperty('buildFromLocal') ) {
                if ( selector instanceof Project ) {
                    selector.afterEvaluate {
                        if ( !selector.plugins.hasPlugin("com.android.library")) {
                            p "${project} -> ${selector} don't have the plugin"
                            p "Due to a limitation of fat-aar we must correct that here"
                            dependencies.implementation selector
                        }
                    }
                }
            }*/
            configurations.embed.extendsFrom(configurations.universalEmbed)
        } else {
            p("Embed has failed : unknow form")
            System.exit(1)
        }
    }
}

// END
