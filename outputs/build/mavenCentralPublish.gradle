apply plugin: 'maven'
apply plugin: 'signing'

def Properties properties = new Properties()
if ( (new File('local.properties')).exists() ) {
	properties.load(project.file("local.properties").newDataInputStream())
}
ext['githubOwner'] = "ReleaseStandard"
ext['githubOwnerEmail'] = "releasestandard@netc.eu"
ext['githubOwnerName'] = "Release Standard"
for(Map.Entry<String, String> e : new HashMap(){{
	put("keyId", "KEYID");
	put("password", "PASSWORD");
	put("key", "KEY");
	put("ossrhUsername", "OSSRH_USERNAME");
	put("ossrhPassword", "OSSRH_PASSWORD");
	put("sonatypeStagingProfileId", "SONATYPE_STAGING_PROFILE_ID");
	put("version", "VERSION");
}}) {
	String k = e.getKey();
	String v = e.getValue();
	ext[k] = properties.getProperty(k)
	if ( System.getenv(v) != null ) {
		ext[k] = System.getenv(v);
	}

	// github CI seem to initialize environment variables to empty string instead of null
        if ( ext[k] != null && ext[k].equals("") ) {
                ext[k] = null;
        }
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    //from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    //from sourceSets.main.allSource
}

//
// Maven publish customization and publish
//
def isRoot = ( rootProject.compareTo(project) == 0 ) 
if ( isRoot ) {
	apply plugin: 'io.github.gradle-nexus.publish-plugin'
 
	nexusPublishing {
	        repositories {
	                sonatype {
	                        stagingProfileId = sonatypeStagingProfileId
	                        username = ossrhUsername
	                        password = ossrhPassword
	                        nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
	                        snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
	                }
	        }
	}
}
apply plugin: 'maven-publish'

def thisProject = project
allprojects { Project p -> 
	p.afterEvaluate {
		def pubname = "${p.path}".replaceAll(":","")
		pubname = pubname.replaceAll("-","")
		pubname = "Module" + pubname.capitalize()
		publishing {
			publications {
				"${pubname}"(MavenPublication) {
					artifact sourcesJar
					artifact javadocJar

					if ( p.plugins.hasPlugin('com.android.library') ) {
						p.afterEvaluate {
							from p.components.release
						}
					} else {
						p.afterEvaluate {
							from p.components.java
						}
					}

					def artifactGroup = "io.github.${githubOwner}.CodeEditor"
					if ( thisProject != p ) {
						artifactGroup += ".${thisProject.name.replace('CodeEditor-', '')}"
					}
					def pname = p.name.replace("CodeEditor-","")
					pom {
						groupId = artifactGroup
						artifactId = pname
						name = pname
						packaging = 'aar'
						description = "${pname} for CodeEditor"
						url = "https://github.com/${githubOwner}/${p.name}"
						scm {
						       connection = "scm:git:github.com/${githubOwner}/${p.name}.git"
						       developerConnection = "scm:git:ssh://github.com/${githubOwner}/${p.name}.git"
						       url = "https://github.com/${githubOwner}/${p.name}"
						}
						developers {
						       developer {
						               id = "${githubOwner}"
						               name = "${githubOwnerName}"
						               email = "${githubOwnerEmail}"
						       }
						}
						licenses {
						       license {
						               name = "The Apache License, Version 2.0"
						               url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
						       }
						}
					}
				}
			}
			signing {
			        useInMemoryPgpKeys(
			                keyId,
		        	        key,
		                	password,
			        )
			        sign publishing.publications."${pubname}"
			}
		}
	}
}
