apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'io.github.gradle-nexus.publish-plugin'

def Properties properties = new Properties()
properties.load(project.file("local.properties").newDataInputStream())
for(Map.Entry<String, String> e : new HashMap(){{
	put("keyId", "KEYID");
	put("password", "PASSWORD");
	put("key", "KEY");
	put("ossrhUsername", "OSSRH_USERNAME");
	put("ossrhPassword", "OSSRH_PASSWORD");
	put("sonatypeStagingProfileId", "SONATYPE_STAGING_PROFILE_ID");
        put("version", "VERSION");
}}) {
	String k = e.getKey();
	String v = e.getValue();
	ext[k] = properties.getProperty(k)
	if ( System.getenv(v) != null ) {
		ext[k] = System.getenv(v);
	}
}

nexusPublishing {
    repositories {
        sonatype {
            stagingProfileId = sonatypeStagingProfileId
            username = ossrhUsername
            password = ossrhPassword
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
        }
    }
}

task collectSubModules() {
	doFirst() {
		project.subprojects { Project p ->
			apply plugin: 'maven'
			apply plugin: 'maven-publish'
			apply plugin: 'signing'

			def folder = 'libs'
			def lib = layout.buildDirectory.file("${folder}/${p.name}-${version}.jar")
			def pArtifact = rootProject.artifacts.add("archives", lib.get().getAsFile()) {
				classifier = "${p.name}"
			}
                        println "pArtifact{classifier=${pArtifact.classifier},date=${pArtifact.date},extension=${pArtifact.extension},name=${pArtifact.name},type=${pArtifact.type}}"
		}
	}
}
task produceBigJar(type: Jar) {
        dependsOn collectSubModules
	project.subprojects { Project p ->
                def folder = 'libs'
		def path = "${folder}/${p.name}-${version}.jar"
	        def lib = layout.buildDirectory.file(path)
		def bdp = p.getBuildDir().getPath() + "/" + path
		println "bdp=" + bdp
		if ( (new File(bdp)).exists() ) {		
			println "Found"
			from(zipTree(lib))
		}
	}
}

artifacts {
	archives produceBigJar
}


println ">" + artifacts.getClass()
def pn = project.name
uploadArchives {
  dependsOn produceBigJar

  repositories {
    mavenDeployer {
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

      repository(url: "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/") {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      snapshotRepository(url: "https://s01.oss.sonatype.org/content/repositories/snapshots/") {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      pom.project {
	name "${pn}"
        packaging 'jar'
	artifactId "${pn}"
	description "${pn} for CodeEditor"
	scm {
               connection "scm:git:github.com/ReleaseStandard/${pn}.git"
               developerConnection "scm:git:ssh://github.com/ReleaseStandard/${pn}.git"
               url "https://github.com/ReleaseStandard/${pn}"
        }

        licenses {
          license {
            name 'The Apache License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }

        developers {
		developer {
			id = 'ReleaseStandard'
			name = 'ReleaseStandard'
			email = 'releasestandard@netc.eu'
		}        
	}

      }
    }
  }
}

signing {
    useInMemoryPgpKeys(
            keyId,
            key,
            password,
    )
    sign configurations.archives
}

