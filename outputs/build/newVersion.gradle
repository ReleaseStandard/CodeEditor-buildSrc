def p(msg) {
	def debug = System.env.DEBUG
	if ( debug ) {
		println msg
	}
}

// deduce the remaining part from an entry object
def getRemainingPart(dir) {
  def remainPart = ""
  def projectDirectory = getProjectPath(dir)
  def rootProjectDirectory = rootDir.getPath()
  remainPart = projectDirectory.replace(rootProjectDirectory,"")
  remainPart = remainPart.replaceAll("/",":")
  return remainPart
}

def getProjectPath(obj) {
  if ( obj instanceof Project ) {
    return obj.projectDir.getPath()
  }
  if ( obj instanceof File ) {
      return obj.getPath()
  }
  return obj	
}

// produce project path from the moduleString
def moduleToProject(moduleString) {
  def trgGroup = "io.github.ReleaseStandard.CodeEditor"
  def parts = moduleString.split(":")
  def group = parts[0]
  def module = parts[1]
  def version = parts[2]
  def remainPart = group.replace(trgGroup,"")
  remainPart = remainPart.replace(".",":")
  def path = remainPart + ":${module}"
  return path
}

//
// This file define how version number is automatically increase
//
task newVersion() {
        dependsOn incrementMinor
        mustRunAfter incrementMinor
        doLast {
                exec {
                        commandLine "git"
                        args "add","version.properties"
                }
                exec {
                        commandLine "git"
                        args "commit","-m","Version ${version}"
                }
                exec {
                        commandLine "git"
                        args "tag","${version}"
                }
        }
}
task version() {
	doFirst {
		println "${version}"
	}
}
task versionRelease() {
	dependsOn assemble
	doLast {
		println ""
		println ""
		println "Then to publish use:"
		println "    ./gradlew publishToSonatype closeAndReleaseStagingRepository"
		println ""
		println ""
	}
}
