def info(msg) {
	project.logger.info(msg)
}

info("Script inclusion")

configurations {
	all {
		resolutionStrategy {
	           dependencySubstitution.all { DependencySubstitution dependency ->

			if ( dependency.requested instanceof ModuleComponentSelector ) {			

				if ( buildFromLocal instanceof String ) {

				   // tweak remote dependencie resolution
				   if ( requested.group == "com.github.ReleaseStandard" ) {

					def g = dependency.requested
					def prj = ":" + g.getModule()

	                                info("use from the local codebase: " + g.getGroup() + ":" + g.getModule() + ":" + g.getVersion() + "->" + prj)
					prj = ":CodeEditor-logger-debug:logger-debug"

					//def targetProject = rootProject.findProject(prj)
					//if (targetProject != null) {
					def projet = rootProject.findProject(":CodeEditor-logger-debug:logger-debug")
					//def projet = rootProject.findProject("")
					if ( projet == null ) {
						println "[ERROR] :CodeEditor-logger-debug not found"
					}
					println "root=" + rootProject.getBuildDir().getPath()
					println "projet.class=" + projet.getClass()
					dependency.useTarget projet

					//dependency.useTarget rootProject.project(":CodeEditor-logger-debug")
					//} else {
					//	println "Error : project not found"
					//}
                                   }
				   println "group=" + requested.getGroup() + ",name=" + requested.getModule()


				}
			}
	           }
		}
	}
}


/**
 * Relative include for subprojects
 */
def implementationR(path) {
	def modsRoot = project.getParent().getPath()
	dependencies {
		implementation project(path: modsRoot + path)
	}
}
project.ext.set("implementationR",{ String path ->
	implementationR(path)
})
