def prefix(msg) {
	return "[TEST]" + msg
}
def info(msg) {
	project.logger.info(prefix(msg))
}
def debug(msg) {
	project.logger.debug(prefix(msg))
}

info("Script inclusion")

/**
 * Relative include for subprojects
 */
def implementationR(path) {
        def parent = project.getParent()
        def modsRoot = ""
        if ( parent != null ) {
                modsRoot = parent.getPath()
        }
        def p = modsRoot + path
        debug("modsRoot=" + modsRoot + ", path=" + path + ",p=" + p)

	// This is in case we build the project from the root
        try {
                String a = buildFromLocal
		String[] parts = p.split(':')
                def parentName = "${parts[1]}"
                if ( parentName.size() == 0 ) {
                        parentName = "${project.name}"
                }
                p = ":${parentName}:${parentName}-" + path.replace(":","") // we remove the last part from the project path
        } catch(Exception e) { }

        dependencies {
                universalEmbed project(path: p)
        }

}

project.ext.set("implementationR",{ String path ->
        implementationR(path)
})

configurations {
	all {
		resolutionStrategy {
	           dependencySubstitution.all { DependencySubstitution dependency ->

                       if ( requested instanceof ProjectComponentSelector ) {
                               info("This is a project dependencies")
                       }
                       else if ( requested instanceof ModuleComponentSelector ) {

				if ( buildFromLocal instanceof String ) {
					// tweak remote dependencie resolution
					/*if ( requested.group == "io.github.ReleaseStandard.CodeEditor" ) {

						println ">>>Dependency resolution"
						def modPath = ":CodeEditor-" + requested.getModule()
						def module = rootProject.findProject(modPath)
						if ( module == null ) {
							println "error : ${modPath} not found"
							info("[ERROR] " + modPath + " not found")
						} else {
							println "module=${module}"
							dependency.useTarget module
						}
					}*/

				}

			}
		}
		}
	}
}

