def prefix(msg) {
	return "[TEST]" + msg
}
def info(msg) {
	project.logger.info(prefix(msg))
}
def debug(msg) {
	project.logger.debug(prefix(msg))
}

info("Script inclusion")

/**
 * Relative include for subprojects
 */
def implementationR(path) {
        def parent = project.getParent()
        def modsRoot = ""
        if ( parent != null ) {
                modsRoot = parent.getPath()
        }
        def p = modsRoot + path
        debug("modsRoot=" + modsRoot + ", path=" + path + ",p=" + p)

        Boolean IsBuildFromLocal = false
        try {
                String a = buildFromLocal
                IsBuildFromLocal = true
        } catch(Exception e) {
               
        }
	if ( IsBuildFromLocal ) {
		String[] parts = p.split(':')
		p = ""
		parts[parts.size()-1]="${parent.name}-" + parts[parts.size()-1]
		for(String part : parts) {
			p += ":" + part
		}
	}

        dependencies {
                implementation project(path: p)
        }

}

project.ext.set("implementationR",{ String path ->
        implementationR(path)
})

configurations {
	all {
		resolutionStrategy {
	           dependencySubstitution.all { DependencySubstitution dependency ->

                       if ( requested instanceof ProjectComponentSelector ) {
                               info("This is a project dependencies")
                       }
                       else if ( requested instanceof ModuleComponentSelector ) {

				if ( buildFromLocal instanceof String ) {

				   // tweak remote dependencie resolution
				   if ( requested.group == "com.github.ReleaseStandard" ) {

					def modPath = ":" + requested.getModule()
					def module = rootProject.findProject(modPath)
					if ( module == null ) {
						info("[ERROR] " + modPath + " not found")
					}

					//
					def modCount = 0
					module.subprojects { Project p ->
						modCount = modCount + 1
					}
					if ( modCount == 1 ) {
						info("  -> Module alone : in " + modPath)
						module.subprojects { Project p ->
							dependency.useTarget p
						}
					} else if ( modCount > 1 ) {
						def DH = project.getDependencies()
						info("  -> Add dependencies of " + modPath)
						module.subprojects { Project p ->
							HashMap<String,Object> hm = new HashMap();
							hm.put("path", p.getPath());
							info("    " + p.getPath())
							Dependency d = DH.project(hm)
							if ( d == null ) {
								info("     [ERROR] during dependency adding ...")
							}
						}
					}
                                   }


				}
			}
	           }
		}
	}
}

